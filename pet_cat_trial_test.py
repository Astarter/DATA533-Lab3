{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Pet:\n",
    "\n",
    "    def __init__(self, name):\n",
    "        self.name = name\n",
    "\n",
    "    def intro(self):\n",
    "        print(\"Hello, my name is {}, I'm your pet\".format(self.name))\n",
    "\n",
    "    def display(self):\n",
    "        print(\"Pet's name: {}\".format(self.name))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Cat(Pet):\n",
    "\n",
    "    def __init__(self, name, color):\n",
    "        self.name = name\n",
    "        self.color = color\n",
    "        self.weight = 6.0 \n",
    "\n",
    "    def sound(self):\n",
    "        print(\"Meow meow prrrrrr\")\n",
    "\n",
    "    def describe(self, adj):\n",
    "        print(\"{}, the {}, {} cat\".format(self.name, adj, self.color))\n",
    "        \n",
    "    def feed(self, cans=1.0):\n",
    "        kg = cans * .1\n",
    "        self.weight += kg\n",
    "        if self.weight > 6.0:\n",
    "            print(\"{} is overweighted. You shouldn't have fed him that much. Check his weight!\".format(self.name))\n",
    "        else:\n",
    "            print(\"{} looks happy and satisfied. You should watch-out for his weight though!\".format(self.name))\n",
    "            \n",
    "    def getWeight(self):\n",
    "        print (\"{} weights {} kg.\".format(self.name, self.weight))\n",
    "        \n",
    "    def on_a_diet(self, kg_down):\n",
    "        self.kg_down = kg_down\n",
    "        self.weight -= kg_down\n",
    "        print (\"{} has been doing a good job, he lost {} kg, and is now {} kg.\".format(self.name, self.kg_down, self.weight))\n",
    "        \n",
    "    def setWeight(self, weight):\n",
    "        self.weight = weight \n",
    "        print (\"{} weights {} kg.\".format(self.name, self.weight))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "class test_Pet(unittest.TestCase):\n",
    "    @classmethod\n",
    "    def setUpClass(cls):\n",
    "        print(\"setUpClass\")\n",
    "\n",
    "    def setUp(self):\n",
    "        self.pet1 = Pet(\"Garfield\")\n",
    "        self.pet2 = Pet(\"Colonel Meow\")\n",
    "        print(\"setUp\")\n",
    "\n",
    "    def test_intro(self):\n",
    "        self.assertEqual(self.pet1.intro(),\"Hello, my name is Garfield, I'm your pet\")\n",
    "        self.assertEqual(self.pet2.intro(),\"Hello, my name is Colonel Meow, I'm your pet\")\n",
    "        print(\"test_intro\")\n",
    "\n",
    "    def test_display(self):\n",
    "        self.assertEqual(self.pet1.display(),\"Pet's name: Garfield\")\n",
    "        self.assertEqual(self.pet2.display(),\"Pet's name: Colonel Meow\")\n",
    "        print(\"test_display\")\n",
    "\n",
    "    def tearDown(self):\n",
    "        print(\"tearDown\")\n",
    "\n",
    "    @classmethod\n",
    "    def tearDownClass(cls):\n",
    "        print(\"tearDownClass\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "class test_Cat(unittest.TestCase):\n",
    "    @classmethod\n",
    "    def setUpClass(cls):\n",
    "        print(\"setUpClass\")\n",
    "\n",
    "    def setUp(self):\n",
    "        self.pet1 = Cat(\"Garfield\", \"orange\")\n",
    "        self.pet2 = Cat(\"Colonel Meow\", \"black\")\n",
    "        print(\"setUp\")\n",
    "\n",
    "    def test_sound(self):\n",
    "        self.assertEqual(self.pet1.sound(),\"Meow meow prrrrrr\")\n",
    "        self.assertEqual(self.pet2.sound(),\"Meow meow prrrrrr\")\n",
    "        print(\"test_sound\")\n",
    "\n",
    "    def test_describe(self):\n",
    "        self.assertEqual(self.pet1.describe(\"lazy\"),\"Garfield, the lazy, orange cat\")\n",
    "        self.assertEqual(self.pet2.describe(\"majestic\"),\"Colonel Meow, the majestic, black cat\")\n",
    "        print(\"test_describe\")\n",
    "        \n",
    "    def test_feed(self):\n",
    "        self.assertEqual(self.pet1.feed(61),\"Garfield is overweighted. You shouldn't have fed him that much. Check his weight!\")\n",
    "        self.assertEqual(self.pet2.feed(61),\"Colonel Meow is overweighted. You shouldn't have fed him that much. Check his weight!\")\n",
    "        print(\"test_feed\")\n",
    "        \n",
    "    def test_setWeight(self):\n",
    "        self.pet1.setWeight('6')\n",
    "        self.pet2.setWeight('3')\n",
    "        self.assertEqual(self.pet1.weight,\"Garfield weights 6.0 kg.\")\n",
    "        self.assertEqual(self.pet2.weight,\"Colonel Meow weights 3.0 kg.\")\n",
    "        \n",
    "    def test_getWeight(self):\n",
    "        self.assertEqual(self.pet1.getWeight,\"Garfield weights 6.0 kg.\")\n",
    "        self.assertEqual(self.pet2.getWeight,\"Colonel Meow weights 6.0 kg.\")\n",
    "        \n",
    "    def test_on_a_diet(self):\n",
    "        self.assertEqual(self.pet1.on_a_diet(2),\"Garfield has been doing a good job, he lost 2 kg, and is now 4.0 kg.\")\n",
    "        self.assertEqual(self.pet2.on_a_diet(3),\"Colonel Meow has been doing a good job, he lost 3 kg, and is now 3.0 kg.\")\n",
    "        print(\"test_feed\")\n",
    "\n",
    "    def tearDown(self):\n",
    "        print(\"tearDown\")\n",
    "\n",
    "    @classmethod\n",
    "    def tearDownClass(cls):\n",
    "        print(\"tearDownClass\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
